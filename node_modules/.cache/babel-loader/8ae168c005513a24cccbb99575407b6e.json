{"ast":null,"code":"var _jsxFileName = \"D:\\\\newspicker\\\\src\\\\Components\\\\DiaplayData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DisplayData({\n  excelData\n}) {\n  _s();\n\n  console.log(excelData);\n  /*let sums = Object.values(groupArray)\n           .map(arr => arr.reduce((sums,{id, value}) => ({id, value: sums.value + +value}), {value:0}))\n            console.log(sums)\n   /*useEffect(() =>{\n    console.log('abc')\n   var data = excelData.filter((v,i,a)=>a.findIndex(t=>(t.username === v.username && t.problem_code === v.problem_code)===i))\n   console.log(data);\n   setComputedData(data);\n  },[excelData]);*/\n\n  const [sorting, setSorting] = useState({\n    field: \"\",\n    order: \"\"\n  });\n  const headers = [{\n    name: \"SORTSEGS\",\n    field: \"SORTSEGS\",\n    sortable: false\n  }, {\n    name: \"MINMAXSWAP\",\n    field: \"MINMAXSWAP\",\n    sortable: false\n  }, {\n    name: \"TSP\",\n    field: \"TSP\",\n    sortable: false\n  }, {\n    name: \"RNDCHULL\",\n    field: \"RNDCHULL\",\n    sortable: false\n  }, {\n    name: \"ONECHANGE\",\n    field: \"ONECHANGE\",\n    sortable: false\n  }, {\n    name: \"Result\",\n    field: \"result_code\",\n    sortable: true\n  }];\n\n  let convertToLocalTime = timeStr => {\n    var date = new Date(timeStr);\n    var strDate = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n    return strDate;\n  };\n\n  let getTotalScore = individualExcelData => {\n    let c = 0;\n    let filteredData = excelData.filter(data => data.username === individualExcelData.username && data.result_code == 15);\n    filteredData.map(res => {\n      c += res.result_code;\n    });\n    return c;\n  };\n\n  let getProblemScore = individualExcelData => {\n    var s1 = '?',\n        s2 = '?',\n        s3 = '?',\n        s4 = '?',\n        s5 = '?';\n    let filteredData = excelData.filter(data => data.username === individualExcelData.username);\n    filteredData.map(res => {\n      switch (res.problem_code) {\n        case 'SORTSEGS':\n          s1 = res.result_code;\n          break;\n\n        case 'MINMAXSWAP':\n          s2 = res.result_code;\n          break;\n\n        case 'TSP':\n          s3 = res.result_code;\n          break;\n\n        case 'RNDCHULL':\n          s4 = res.result_code;\n          break;\n\n        case 'ONECHANGE':\n          s5 = res.result_code;\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: s1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: s2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: s3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: s4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: s5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  };\n\n  const sortedData = useMemo(() => {\n    //Sorting comments\n    if (sorting.field) {\n      /*const reversed = sorting.order === \"asc\" ? 1 : -1;\n      computedData = computedData.sort(\n          (a, b) => (\n            reversed * (getTotalScore(a) - getTotalScore(b)),\n            console.log(a)\n          )\n          \n      );*/\n      console.log(\"data:\" + excelData);\n      const data = [].concat(excelData).sort((a, b) => getTotalScore(a) > getTotalScore(b) ? 1 : -1);\n    }\n  }, [excelData, sorting]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DataWrapper\",\n    children: [excelData === null && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"No file selected\"\n    }, void 0, false), excelData !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table1 \",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          headers: headers,\n          onSorting: (field, order) => setSorting({\n            field,\n            order\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Gender\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Country Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Country Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Submission Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Submission Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"75\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.values(excelData).map(individualExcelData => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: individualExcelData.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: individualExcelData.gender\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: individualExcelData.country_code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: individualExcelData.country_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: individualExcelData.submission_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: convertToLocalTime(individualExcelData.submission_date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }, this), \"// \", getProblemScore(excelData), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: getTotalScore(individualExcelData)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }, this)]\n          }, individualExcelData.username, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 20\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n}\n\n_s(DisplayData, \"Lkl7Rg3/oj3KbFCqGs55CnFQwbA=\");\n\n_c = DisplayData;\nexport default DisplayData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"sources":["D:/newspicker/src/Components/DiaplayData.js"],"names":["React","useState","useMemo","useEffect","Header","DisplayData","excelData","console","log","sorting","setSorting","field","order","headers","name","sortable","convertToLocalTime","timeStr","date","Date","strDate","getHours","getMinutes","getSeconds","getTotalScore","individualExcelData","c","filteredData","filter","data","username","result_code","map","res","getProblemScore","s1","s2","s3","s4","s5","problem_code","sortedData","concat","sort","a","b","Object","values","gender","country_code","country_name","submission_id","submission_date"],"mappings":"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","sourcesContent":["import React, {useState, useMemo, useEffect} from 'react';\nimport Header from './Header';\n\nfunction DisplayData ({excelData}) {\n\n  console.log(excelData);\n \n  /*let sums = Object.values(groupArray)\n           .map(arr => arr.reduce((sums,{id, value}) => ({id, value: sums.value + +value}), {value:0}))\n            console.log(sums)\n\n  /*useEffect(() =>{\n    console.log('abc')\n   var data = excelData.filter((v,i,a)=>a.findIndex(t=>(t.username === v.username && t.problem_code === v.problem_code)===i))\n   console.log(data);\n   setComputedData(data);\n  },[excelData]);*/\n\n  const [sorting, setSorting] = useState({ field: \"\", order: \"\" });\n\n  const headers = [\n    { name: \"SORTSEGS\", field: \"SORTSEGS\", sortable: false },\n    { name: \"MINMAXSWAP\", field: \"MINMAXSWAP\", sortable: false },\n    { name: \"TSP\", field: \"TSP\", sortable: false },\n    { name: \"RNDCHULL\", field: \"RNDCHULL\", sortable: false },\n    { name: \"ONECHANGE\", field: \"ONECHANGE\", sortable: false },\n    { name: \"Result\", field: \"result_code\", sortable: true }\n  ];\n\n  let convertToLocalTime = (timeStr) =>{\n    var date = new Date(timeStr);\n    var strDate = date.getHours() +':'+ date.getMinutes() +':'+ date.getSeconds();\n    return strDate;\n  }\n\n  let getTotalScore = (individualExcelData) => {\n    let c=0;\n     let filteredData =  excelData.filter(data => data.username === individualExcelData.username && data.result_code == 15);\n     filteredData.map(res => {\n        c += res.result_code;\n     });\n    \n    return c;\n  }\n\n  let getProblemScore = (individualExcelData) => {\n     var s1 = '?', s2 = '?', s3 = '?', s4 = '?', s5 = '?';\n     let filteredData =  excelData.filter(data => data.username === individualExcelData.username);\n     filteredData.map(res => {\n        switch(res.problem_code)\n        {\n          case 'SORTSEGS' : s1 = res.result_code;\n                            break;\n          case 'MINMAXSWAP' : s2 = res.result_code;\n                            break;\n          case 'TSP': s3 = res.result_code;\n                            break;\n          case 'RNDCHULL' : s4 = res.result_code;\n                            break;\n          case 'ONECHANGE' : s5 = res.result_code;\n\n        }              \n     });\n\n    return(\n      <>\n      <td>{s1}</td>\n      <td>{s2}</td>\n      <td>{s3}</td>\n      <td>{s4}</td>\n      <td>{s5}</td>\n      </>\n    );\n  }\n\n  const sortedData = useMemo(() => {\n\n    //Sorting comments\n    if (sorting.field) {\n        /*const reversed = sorting.order === \"asc\" ? 1 : -1;\n        computedData = computedData.sort(\n            (a, b) => (\n              reversed * (getTotalScore(a) - getTotalScore(b)),\n              console.log(a)\n            )\n            \n        );*/\n         console.log(\"data:\"+ excelData);\n        const data = [].concat(excelData)\n        .sort((a, b) => getTotalScore(a) > getTotalScore(b) ? 1 : -1)\n       \n    }\n    }, [excelData,sorting]);\n\n  return( \n  <div className=\"DataWrapper\">\n     {excelData===null&&<>No file selected</>}\n        {excelData!==null&&(\n          <div>\n            <table className='table1 '>\n             <Header\n                  headers={headers}\n                  onSorting={(field, order) =>\n                  setSorting({ field, order })\n                   }\n             />\n              <thead>\n                <tr>\n                    <th>Username</th>\n                    <th>Gender</th>\n                    <th>Country Code</th>\n                    <th>Country Name</th>\n                    <th >Submission Id</th>    \n                    <th >Submission Date</th>\n                    <td>15</td>\n                    <td>15</td>\n                    <td>15</td>\n                    <td>15</td>\n                    <td>15</td>\n                    <th>75</th>     \n                  </tr>                \n               </thead>\n             \n           <tbody>\n            {Object.values(excelData).map((individualExcelData)=>(\n                   <tr key={individualExcelData.username}>\n                    <td >{individualExcelData.username}</td>\n                    <td >{individualExcelData.gender}</td>\n                    <td >{individualExcelData.country_code}</td>\n                    <td >{individualExcelData.country_name}</td>\n                    <td >{individualExcelData.submission_id}</td>\n                    <td>{convertToLocalTime(individualExcelData.submission_date)}</td>\n                   // {getProblemScore(excelData)}\n                    <td>{getTotalScore(individualExcelData)}</td>\n                  </tr>   \n                 ))\n                 \n                }\n             </tbody>   \n           </table>  \n        </div>       \n        )}       \n  </div>);\n}\n\n\nexport default DisplayData;\n"]},"metadata":{},"sourceType":"module"}