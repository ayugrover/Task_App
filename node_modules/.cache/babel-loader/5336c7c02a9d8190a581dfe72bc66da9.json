{"ast":null,"code":"var _jsxFileName = \"D:\\\\newspicker\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport DisplayData from './Components/DiaplayData';\nimport NewsTicker, { Directions } from \"./react-advanced-news-ticker\";\nimport * as XLSX from 'xlsx';\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [excelFile, setExcelFile] = useState(null);\n  const [excelFileError, setExcelFileError] = useState(null); // submits\n\n  const [excelData, setExcelData] = useState([]); // it will contain array of objects\n\n  const handleFile = e => {\n    let selectedFile = e.target.files[0];\n\n    if (selectedFile) {\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(selectedFile);\n\n      reader.onload = e => {\n        setExcelFileError(null);\n        setExcelFile(e.target.result);\n      };\n    } else {\n      console.log('plz select your file');\n    }\n  }; // submit function\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (excelFile != null) {\n      const workbook = XLSX.read(excelFile, {\n        type: 'buffer',\n        cellDates: true\n      });\n      console.log(workbook);\n      const worksheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[worksheetName];\n      let data = XLSX.utils.sheet_to_json(worksheet); //const usersSet = [...new Set(data.map(a => a.username))];\n\n      var filteredData = data.reduce((groupedUsers, user) => {\n        var problems = {};\n        var element = {};\n\n        if (groupedUsers[user['username']] == null) {\n          groupedUsers[user['username']] = [];\n          element.username = user.username;\n          element.fullname = user.fullname;\n          element.gender = user.gender;\n          element.country_name = user.country_name; // groupedUsers[user['username']].push(element);\n        }\n\n        problems.problem_code = user.problem_code;\n        problems.submission_date = user.submission_date;\n        var c = 0;\n        if (user.result_code == 15) c += user.result_code;\n        problems.result_code = user.result_code;\n        element.problems = problems;\n        groupedUsers[user['username']].push(element);\n        return groupedUsers;\n      }, {});\n      console.log(filteredData);\n      setExcelData(filteredData);\n    } else {\n      setExcelData(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-group\",\n        autoComplete: \"off\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Upload Excel file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control\",\n          onChange: handleFile,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), excelFileError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-danger\",\n          style: {\n            marginTop: 5 + 'px'\n          },\n          children: excelFileError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-success\",\n          style: {\n            marginTop: 5 + 'px'\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"View Excel file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer\",\n      children: /*#__PURE__*/_jsxDEV(DisplayData, {\n        excelData: excelData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ywm5xR0p1N/87O0ITOyuHcO9o6M=\");\n\n_c = App;\nexport default App; //'file://C://Users//LENOVO-PC//Documents//Fetch-Excel-File-as-JSON-in-React-main//src//Snackdown_Elimination_2021_Submissions.xlsx'\n//  <NewsTicker id=\"data12\" direction={Directions.UP} rowHeight={5} maxRows={5} duration={4000}>\n// <DisplayData excelData={excelData}/>\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/newspicker/src/App.js"],"names":["useState","useEffect","DisplayData","NewsTicker","Directions","XLSX","App","excelFile","setExcelFile","excelFileError","setExcelFileError","excelData","setExcelData","handleFile","e","selectedFile","target","files","reader","FileReader","readAsArrayBuffer","onload","result","console","log","handleSubmit","preventDefault","workbook","read","type","cellDates","worksheetName","SheetNames","worksheet","Sheets","data","utils","sheet_to_json","filteredData","reduce","groupedUsers","user","problems","element","username","fullname","gender","country_name","problem_code","submission_date","c","result_code","push","marginTop"],"mappings":"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","sourcesContent":["import {useState,useEffect} from 'react';\nimport DisplayData from './Components/DiaplayData';\nimport NewsTicker, { Directions } from \"./react-advanced-news-ticker\"; \nimport * as XLSX from 'xlsx';\nimport \"./index.css\";\n\nfunction App() { \n  const [excelFile, setExcelFile]=useState(null);\n  const [excelFileError, setExcelFileError]=useState(null);  \n \n  // submits\n  const [excelData, setExcelData]=useState([]);\n  // it will contain array of objects\n\n  const handleFile = (e)=>{\n    let selectedFile = e.target.files[0];\n    \n    if(selectedFile){\n        let reader = new FileReader();\n        reader.readAsArrayBuffer(selectedFile);\n        reader.onload=(e)=>{\n          setExcelFileError(null);\n          setExcelFile(e.target.result);            \n        } \n    }\n    else{\n      console.log('plz select your file');\n    }\n  }\n\n  // submit function\n  const handleSubmit=(e)=>{\n    e.preventDefault();  \n    if(excelFile!=null){\n      const workbook = XLSX.read(excelFile,{type:'buffer', cellDates: true });\n      console.log(workbook);\n      const worksheetName = workbook.SheetNames[0];\n      const worksheet=workbook.Sheets[worksheetName];\n      let data = XLSX.utils.sheet_to_json(worksheet);\n      //const usersSet = [...new Set(data.map(a => a.username))];\n      var filteredData = data.reduce((groupedUsers, user) =>{   \n        var problems = {};\n        var element = {};\n      if(groupedUsers[user['username']] == null){ \n          groupedUsers[user['username']] = [];\n\n          element.username = user.username;\n          element.fullname = user.fullname;\n          element.gender = user.gender;\n          element.country_name = user.country_name;\n         // groupedUsers[user['username']].push(element);\n      }\n      \n      problems.problem_code = user.problem_code;\n      problems.submission_date = user.submission_date;\n      var c = 0;\n      if(user.result_code == 15)\n           c += user.result_code; \n      problems.result_code = user.result_code;\n      element.problems = problems;\n      groupedUsers[user['username']].push(element);\n\n      return groupedUsers;\n      },{});\n      \n      console.log(filteredData);\n      setExcelData(filteredData);\n    }\n    else{\n      setExcelData(null);\n    }\n  }\n  \n  return (\n    <div className=\"container\">\n      {/* upload file section */}\n      <div className='form'>\n      <form className='form-group' autoComplete=\"off\"\n        onSubmit={handleSubmit}>\n          <label><h5>Upload Excel file</h5></label>\n          <br></br>\n          <input type='file' className='form-control'\n          onChange={handleFile} required></input>                  \n          {excelFileError&&<div className='text-danger'\n          style={{marginTop:5+'px'}}>{excelFileError}</div>}\n          <button type='submit' className='btn btn-success'\n          style={{marginTop:5+'px'}}>Submit</button>\n        </form>\n      </div>\n\n      <br></br>\n      <hr></hr>\n\n      {/* view file section */}\n      <h5>View Excel file</h5>\n      <div className='viewer'>\n        <DisplayData excelData={excelData}/>\n      </div>\n    </div>\n  );\n} \n\nexport default App;\n\n//'file://C://Users//LENOVO-PC//Documents//Fetch-Excel-File-as-JSON-in-React-main//src//Snackdown_Elimination_2021_Submissions.xlsx'\n//  <NewsTicker id=\"data12\" direction={Directions.UP} rowHeight={5} maxRows={5} duration={4000}>\n// <DisplayData excelData={excelData}/>"]},"metadata":{},"sourceType":"module"}